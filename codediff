#!/bin/bash
ThisScriptParentPath="$( readlink -f "${0%/*}" )"

# codediff command
#    diff tool for Visual Studio Code git diff mode

WorkingFolderPathDefault="$HOME/_tmp/_diff/1"
if [ -e "/Applications/Visual Studio Code.app" ]; then
    VisualStudioCodePath="/Applications/Visual Studio Code.app/Contents/Resources/app/bin/code"
elif [ -e "${HOME}/AppData/Local/Programs/Microsoft VS Code" ]; then
    VisualStudioCodePath="${HOME}/AppData/Local/Programs/Microsoft VS Code/bin/code"
else
    VisualStudioCodePath="code"
fi

PositionalArgs=()
while [[ $# -gt 0 ]]; do
    case $1 in
        --test)  Options_Test="yes"; shift;;  #// Without value
        -*) echo "Unknown option $1"; exit 1;;
        *) PositionalArgs+=("$1"); shift;;
    esac
done
set -- "${PositionalArgs[@]}"  #// set $1, $2, ...
unset PositionalArgs

function  Main() {
    local  iniFilePath="$1"
    local  comparePathA="$1"  #// $1 is shared
    local  comparePathB="$2"
    local  workingFolderPath="${WorkingFolderPathDefault}"

    if [ "${comparePathA}" != ""  -a  "${comparePathB}" != "" ]; then
        MakeIniFileFromParameters  "${comparePathA}"  "${comparePathB}" 
    elif [ "${iniFilePath}" != ""  -a  "${comparePathB}" == ""  -a  -f "${iniFilePath}" ]; then
        CopyIniFile  "${iniFilePath}"  "${workingFolderPath}"
    fi

    if [ ! -e "${workingFolderPath}/.codediff.ini" ]; then
        MakeWorkingFolderIfNot  "${workingFolderPath}"
        OpenIDE  "${workingFolderPath}"  "${workingFolderPath}/.codediff.ini"
    else
        ParseIniFile  "${workingFolderPath}/.codediff.ini"
        CreateWorkingFiles  0  "${workingFolderPath}/working_0"
        CreateWorkingFiles  1  "${workingFolderPath}/working_1"
        CreateNewGitWorking  "${workingFolderPath}/working_0"  "${workingFolderPath}/working_1"
        OpenIDE  "${workingFolderPath}/working"  "${workingFolderPath}/.codediff.ini"
    fi
}

function  MakeWorkingFolderIfNot() {
    local  workingFolderPath="$1"
    if [ ! -e "${workingFolderPath}" ]; then

        mkdir -p  "${workingFolderPath}"
    fi
    if [ ! -e "${workingFolderPath}/.codediff.ini" ]; then

        cp  "${ThisScriptParentPath}/codediff_template.ini"  "${workingFolderPath}/.codediff.ini"
    fi
}

function  MakeIniFileFromParameters() {
    local  parameters=( "$1" "$2" )
    local  output="${workingFolderPath}/.codediff.ini"
    local  fileOrFolder=1
    local  repository=2
    rm -rf    "${workingFolderPath}"
    mkdir -p  "${workingFolderPath}"

    echo  "# codediff command setting file"  >  "${output}"
    for i in {0..1}; do
        local  parameter="${parameters[${i}]}"
        local  kind=""
        echo  ""  >>  "${output}"
        echo  "[Compare-${i}]"  >>  "${output}"

        if [ "${parameter:0:4}" == "http" ]; then
            kind="${repository}"
            #// http(s)://_____
            #// http(s)://_____#__Branch__
            local  repositoryURL="${parameter%%#*}"  #// left of #
            if [ "${repositoryURL}" != "${parameter}" ]; then
                local  branchOrTag="${parameter#*#*}"  #// right of #
            else
                local  branchOrTag=""
            fi
        else
            kind="${fileOrFolder}"
            local  fullPath="$(x="$( GetFullPath "${parameter}" )" && echo "$x" || echo "(ERROR:$?)" )"
            ExitIfMatched  "${fullPath}"  '^\(ERROR:([0-9]*)\)$'
        fi

        if [ "${kind}" == "${fileOrFolder}" ]; then
            echo  "LocalPath = ${fullPath}"  >>  "${output}"
        elif [ "${kind}" == "${repository}" ]; then
            echo  "RepositoryURL = ${repositoryURL}"  >>  "${output}"
            if [ "${branchOrTag}" != "" ]; then
                echo  "BranchOrTag = ${branchOrTag}"  >>  "${output}"
            fi
        fi
    done
}

function  CopyIniFile() {
    #// Replace "LocalPath" parameter to full path.
    local  iniFilePath="$1"
    local  workingFolderPath="$2"
    local  basePath="${iniFilePath%/*}"
    mkdir -p  "${workingFolderPath}"
    local  line=""
    local  settingIniFileLines=( )  &&  while IFS= read -r line ;do  settingIniFileLines+=("$line") ;done < "${iniFilePath}"

    for  line  in "${settingIniFileLines[@]}"; do
        local  lineType="$( ParseIniFileLineType  "${line}" )"
        if [ "${lineType}" == "parameter" ]; then
            local  name="$( ParseIniFileParameterName  "${line}" )"

            if [ "${name}" == "LocalPath" ]; then
                local  value="$( ParseIniFileParameterValue  "${line}" )"
                localPath="$( Evaluate "${value}" )"
                value="$( echo "${value}" | sed -E 's/([$^.*+?\(\){}\|[])/\\\1/g' | sed -E 's/]/\\]/g' )"  #// Escape

                localPath="$(x="$( GetFullPath  "${localPath}"  "${basePath}" )" && echo "$x" || echo "(ERROR:$?)" )"
                ExitIfMatched  "${localPath}"  '^\(ERROR:([0-9]*)\)$'
                line="$( echo "${line}"  |  sed  "s|${value}|${localPath}|" )"
            fi
        fi
        output+=("${line}")
    done

    printf '%s\n' "${output[@]}"  >  "${workingFolderPath}/.codediff.ini"
}

function  CreateWorkingFiles() {
    local  index="$1"
    local  outputFolderPath="$2"
    local  settingName="${Setting_Name[${index}]}"
    local  localFullPath="${Setting_LocalFullPath[${index}]}"
    local  repositoryURL="${Setting_RepositoryURL[${index}]}"
    local  branchOrTag="${Setting_BranchOrTag[${index}]}"
    local  baseRelativePath="${Setting_BaseRelativePath[${index}]}"

    rm -rf  "${outputFolderPath}"
    if [ "${localFullPath}" != "" ]; then

        CopyFolder  "${localFullPath}"  "${outputFolderPath}"
        rm -rf  "${outputFolderPath}/.git"
    else
        local  options=""
        if [ "${branchOrTag}" != "" ]; then
            options="${options}  -b ${branchOrTag}"
        fi
        if [ "${baseRelativePath}" == "." ]; then

            git clone  "${repositoryURL}" ${options}  "${outputFolderPath}"  ||  Error
            rm -rf  "${outputFolderPath}/.git"
        elif [ "${baseRelativePath:0:2}" == ".." ]; then
            Error  "ERROR: BaseRelativePath cannot be set a parent folder."
        else
            git clone  --filter=blob:none --sparse  "${repositoryURL}" ${options} \
                "${WorkingFolderPathDefault}/workingOfWorking"  ||  Error
            pushd  "${WorkingFolderPathDefault}/workingOfWorking"  > /dev/null  ||  Error

            git sparse-checkout set "${baseRelativePath}"
            popd  > /dev/null
            rm -rf  "${outputFolderPath}"

            mv  "${WorkingFolderPathDefault}/workingOfWorking/${baseRelativePath}"  "${outputFolderPath}"
            rm -rf  "${WorkingFolderPathDefault}/workingOfWorking"
        fi
    fi

    local  deletingPath=""
    for  deletingPath  in "${Setting_DeleteRelativePath[@]}"; do
        pushd  "${outputFolderPath}"  > /dev/null  ||  Error

        rm -rf  "${deletingPath}"
        popd  > /dev/null
    done
}

function  CreateNewGitWorking() {
    local  oldContentsPath="$1"
    local  newContentsPath="$2"
    AssertNotExist  "${oldContentsPath}/.git"
    AssertNotExist  "${newContentsPath}/.git"

    rm -rf "${workingFolderPath}/working"
    mkdir  "${workingFolderPath}/working"
    pushd  "${workingFolderPath}/working"  > /dev/null  ||  Error

    git init ${GitInitOption}  > /dev/null  2>&1
    git config --local user.email "you@example.com"
    git config --local user.name "Your Name"
    popd  > /dev/null
    mv  "${workingFolderPath}/working/.git"  "${oldContentsPath}"
    pushd  "${oldContentsPath}"  > /dev/null  ||  Error
    find "." -type f  |  xargs  -I {} \
        chmod 444 "{}"

    git add "."
    git commit -m "${Setting_Name[0]}"  > /dev/null  2>&1
    popd  > /dev/null
    mv  "${oldContentsPath}/.git"  "${newContentsPath}"
    pushd  "${newContentsPath}"  > /dev/null  ||  Error
    find "." -type f  |  xargs  -I {} \
        chmod 444 "{}"

    git add "."
    git commit -m "${Setting_Name[1]}"  > /dev/null  2>&1
    popd  > /dev/null
    mv  "${newContentsPath}/.git"  "${workingFolderPath}/working"
    pushd  "${workingFolderPath}/working"  > /dev/null  ||  Error

    git checkout "."  > /dev/null  2>&1
    git reset --soft HEAD^
    mv  ".git"  ".."
    find "." -type f  |  xargs  -I {} \
        chmod 444 "{}"
    mv  "../.git"  "."
    popd  > /dev/null
}

function  OpenIDE() {
    local  openingFolderPath="$1"
    local  secondPath="$2"
    if [ "${Options_Test}" != "" ]; then
        echo  "OpenIDE \"${openingFolderPath}\""  >  "_codediff.log"
    else
        echo  "codediff: \"${openingFolderPath}\""

        "${VisualStudioCodePath}" -g  "${openingFolderPath}"  "${secondPath}"
    fi
}

function  ParseIniFile() {
    local  iniFilePath="$1"
    ResetSetting
    StartTagParser  "${iniFilePath}"
    local  basePath="${iniFilePath%/*}"
    local  settingName=""
    local  localFullPath=""
    local  repositoryURL=""
    local  branchOrTag=""
    local  baseRelativePath=""
    AssertExist  "${iniFilePath}"
    local  line=""
    local  settingIniFileLines=( )  &&  while IFS= read -r line ;do  settingIniFileLines+=("$line") ;done < "${iniFilePath}"

    for  line  in "${settingIniFileLines[@]}"; do
        if ! ParsingIsActive "${line}"; then  continue  ;fi
        local  lineType="$( ParseIniFileLineType  "${line}" )"

        if [ "${lineType}" == "section" ]; then
            if [ "${settingName}" != "" ]; then
                AppendSetting  "${settingName}"  "${localFullPath}"  "${repositoryURL}"  "${branchOrTag}"  "${baseRelativePath}"
            fi

            settingName="$( ParseIniFileSectionName "${line}" )"
            localFullPath=""
            repositoryURL=""
            branchOrTag=""
            baseRelativePath=""
        elif [ "${lineType}" == "parameter" ]; then
            local  name="$( ParseIniFileParameterName  "${line}" )"
            local  value="$( ParseIniFileParameterValue  "${line}" )"
            value="$( Evaluate "${value}" )"
            if [ "${name}" == "LocalPath" ]; then
                localFullPath="$( GetFullPath  "${value}"  "${basePath}" )"
            elif [ "${name}" == "RepositoryURL" ]; then
                repositoryURL="${value}"
            elif [ "${name}" == "BranchOrTag" ]; then
                branchOrTag="${value}"
            elif [ "${name}" == "BaseRelativePath" ]; then
                baseRelativePath="${value}"
            elif [ "${name}" == "DeleteRelativePath" ]; then
                Setting_DeleteRelativePath+=("${value}")
            else
                Error  "ERROR: Unknown parameter: ${name}."
            fi
        fi
    done
    AppendSetting  "${settingName}"  "${localFullPath}"  "${repositoryURL}"  "${branchOrTag}"  "${baseRelativePath}"

    if [ "${#Setting_Name[@]}" != 2 ]; then
        Error  "ERROR: section count must be 2 in ${workingFolderPath}/.codediff.ini file."
    fi
}

function  ResetSetting() {
    Setting_Name=( )
    Setting_LocalFullPath=( )
    Setting_RepositoryURL=( )
    Setting_BranchOrTag=( )
    Setting_BaseRelativePath=( )
    Setting_DeleteRelativePath=( )
}

function  AppendSetting() {
    local  settingName="$1"
    local  localFullPath="$2"
    local  repositoryURL="$3"
    local  branchOrTag="$4"
    local  baseRelativePath="$5"
    local  lastOfErrorMessage="in ${workingFolderPath}/.codediff.ini file."

    if [ "${settingName}" == "" ]; then
        Error  "ERROR: Not specified section name ${lastOfErrorMessage}"
    elif [ "${localFullPath}" != "" ]; then
        if [ "${localFullPath:0:1}" != "/" ]; then
            Error  "ERROR: LocalPath must be full path ${lastOfErrorMessage}"
        elif [ "${repositoryURL}" != "" ]; then
            Error  "ERROR: Cannot both setting LocalPath and RepositoryURL ${lastOfErrorMessage}"
        elif [ "${branchOrTag}" != "" ]; then
            Error  "ERROR: Cannot both setting LocalPath and BranchOrTag ${lastOfErrorMessage}"
        elif [ "${baseRelativePath}" != "" ]; then
            Error  "ERROR: Cannot both setting LocalPath and BaseRelativePath ${lastOfErrorMessage}"
        fi
    elif [ "${repositoryURL}" != "" ]; then
        if [ "${baseRelativePath}" == "" ]; then
            baseRelativePath="."
        fi
    else
        Error  "ERROR: LocalPath or RepositoryURL must be set ${lastOfErrorMessage}"
    fi

    Setting_Name+=("${settingName}")
    Setting_LocalFullPath+=("${localFullPath}")
    Setting_RepositoryURL+=("${repositoryURL}")
    Setting_BranchOrTag+=("${branchOrTag}")
    Setting_BaseRelativePath+=("${baseRelativePath}")
}

function  StartTagParser() {
    local  iniFilePath="$1"

    if cat "${iniFilePath}"  |  grep "#codediff:" > /dev/null; then
        TagParserIsActive="${True}"
        ParsingState="NotStart"
        SettingIndent=""
    else
        TagParserIsActive="${False}"
    fi
}
TagParserIsActive="${False}"
ParsingState="NotStart"
SettingIndent=""

function  ParsingIsActive() {
    local  line="$1"
    if [ "${TagParserIsActive}" == "${False}" ]; then
        return  "${True}"
    fi

    if [ "${line/[[:space:]]/}" != "" ]; then
        if [ "${ParsingState}" == "NotStart" ]; then
            if echo "${line}"  |  grep "#codediff:" > /dev/null; then
                ParsingState="OnTag"
            fi
        elif [ "${ParsingState}" == "OnTag" ]; then
            SettingIndent="$( echo "${line}"  |  grep -o "^ *" )"
            ParsingState="Active"
        elif [ "${ParsingState}" == "Active" ]; then
            if !( echo "${line}"  |  grep "^${SettingIndent}" ) > /dev/null; then
                ParsingState="Done"
            fi
        fi
    fi

    if [ "${ParsingState}" == "Active" ]; then
        return  "${True}"
    else
        return  "${False}"
    fi
}

function  CopyFolder() {
    local  source="$1"
    local  destination="$2"
    local  ignoreDotGit="$3"  #// ${True}, ${False}(default)
    local  excludeOption="--exclude=./.git"
    source="$( CutLastOf  "${source}"  "/" )"
    destination="$( CutLastOf  "${destination}"  "/" )"
    if [ "${ignoreDotGit}" != ""  -a  "${ignoreDotGit}" != "${excludeOption}" ]; then
        TestError  "Bad option: ${ignoreDotGit}"
        return  "${False}"
    fi

    mkdir -p  "${destination}/"
    if [ "${ignoreDotGit}" == "${excludeOption}" ]; then
        ls -a "${source}" | grep -v  -e "^\.git$"  -e "^\.$"  -e "^\.\.$" | xargs  -I {} \
            cp -Rap  "${source}/{}"  "${destination}/"
    else
        ls -a "${source}" | grep -v  -e "^\.$"  -e "^\.\.$" | xargs  -I {} \
            cp -Rap  "${source}/{}"  "${destination}/"
    fi
}

function  GetFullPath() {
    local  relativePath="$1"  #// or full path
    local  basePath="$2"
    local  option="$3"
    if [ "${option}" == "--touch" ]; then
        if [ "${basePath}" == "" ]; then
            mkdir -p  "${relativePath%/*}"
            touch  "${relativePath}"  #// for next readlink
        else
            local  touchPath="${basePath}/${relativePath}"
            mkdir -p  "${touchPath%/*}"
            touch  "${basePath}/${relativePath}"  #// for next readlink
        fi
    fi

    if [ "${basePath}" == "" ]; then
        local  fullPath="$( readlink -f  "${relativePath}" )"
        if [ "${fullPath}" != "" ]; then
            echo  "${fullPath}"
            return
        fi
        basePath="${PWD}"
    fi
    local  baseTail="${basePath: $((${#basePath}-3))}"
    if [ "${baseTail}" == "/.." ]; then
        basePath=${basePath%/*}
        basePath=${basePath%/*}
    fi

    if [ "${relativePath:0:1}" != "/"  -a  "${relativePath:0:1}" != '$' ]; then
        local  fullPath="$( readlink -f  "${basePath}/${relativePath}" )"
    else
        local  fullPath="${relativePath}"
    fi
    fullPath="$( eval echo "${fullPath}" )"  #// Evaluate variables
    if [ "${fullPath}" == "" ]; then
        if [ "${option}" == "--mkdir" ]; then
            pushd  "${basePath}"  > /dev/null
            mkdir -p  "${relativePath}"
            popd  > /dev/null
        elif [ "${option}" != "--empty-if-not-exist" ]; then
            Error  "ERROR: Cannot get full path from \"${relativePath}\" in \"${basePath}\"."
        fi
    fi
    echo  "${fullPath}"
}

function  CutLastOf() {
    local  wholeString="$1"
    local  lastExpected="$2"

    if [ "${wholeString:${#wholeString}-${#lastExpected}:${#lastExpected}}" == "${lastExpected}" ]; then
        echo  "${wholeString:0:${#wholeString}-${#lastExpected}}"
    else
        echo  "${wholeString}"
    fi
}

function  ParseIniFileLineType() {
    local  line="$1"
    local  words=$( echo "${line}" | xargs )
    local  head="${words:0:1}"

    if [ "${head}" == ""  -o  "${head}" == ";"  -o  "${head}" == "#" ]; then
        echo  "empty"
    elif [ "${head}" == "[" ]; then
        echo  "section"
    else
        echo  "parameter"
    fi
}

function  ParseIniFileSectionName() {
    local  line="$1"
    echo  "${line}"  |  sed -E 's/^[ \t]*\[|\] *$//g'
}

function  ParseIniFileParameterName() {
    local  line="$1"
    echo  "${line}"  |  grep -o  '[^ ]* *='  |  sed 's/ *=$//'
}

function  ParseIniFileParameterValue() {
    local  line="$1"
    local  quotedValue="$( echo "${line}"  |  grep -o  '".*"' )"
    if [ "${quotedValue}" != "" ]; then
        echo  "${quotedValue: 1 : $(( ${#quotedValue} - 2 ))}"  #// Cut " "
    else
        echo  "${line}"  |  grep -o '=.*'  |  sed -E 's/^= *//g'  
    fi
}

function  gitInitOption() {
    if [ "$( LessThanVersion "$(git --version)" "2.31.1" )" == "${True}" ]; then
        echo  ""
    else
        echo  "-bmain"  #// "-b main" occurs an error in bash debug
    fi
}

# LessThanVersion
#     if [ "$( LessThanVersion "$(git --version)" "2.31.1")" == "${True}" ]; then
function  LessThanVersion() {
    local  textContainsVersionA="$1"
    local  textContainsVersionB="$2"
    local  isGoodFormat="${True}"
    echo "${textContainsVersionA}" | grep -e "[0-9]\+\.[0-9]\+\.[0-9]\+" > /dev/null  ||  isGoodFormat="${False}"
    echo "${textContainsVersionB}" | grep -e "[0-9]\+\.[0-9]\+\.[0-9]\+" > /dev/null  ||  isGoodFormat="${False}"
    if [ "${isGoodFormat}" == "${False}" ]; then
        Error  "\"${textContainsVersionA}\" or \"${textContainsVersionB}\" is not semantic version."
    fi

    local  numbersA=( $( echo "${textContainsVersionA}" | grep -o -e "[0-9]\+" ) )
    local  numbersB=( $( echo "${textContainsVersionB}" | grep -o -e "[0-9]\+" ) )
    if [ "${numbersA[0]}" -lt "${numbersB[0]}" ]; then
        echo "${True}"
        return
    elif [ "${numbersA[0]}" == "${numbersB[0]}" ]; then
        if [ "${numbersA[1]}" -lt "${numbersB[1]}" ]; then
            echo "${True}"
            return
        elif [ "${numbersA[1]}" == "${numbersB[1]}" ]; then
            if [ "${numbersA[2]}" -lt "${numbersB[2]}" ]; then
                echo "${True}"
                return
            fi
        fi
    fi
    echo "${False}"
}

# Evaluate
#     Expand variables
# Example:
#     var1='value  1'
#     var2='${var1}  2'
#     evaluated="$( Evaluate "${var2}" )"  #// value  1  2
function  Evaluate() {
    local  expression="$1"
    eval echo "$( eval echo '\""${expression}"\"' )"
}

function  AssertExist() {
    local  path="$1"
    local  leftOfWildcard="${path%\**}"
    if [ "${leftOfWildcard}" == "${path}" ]; then  #// No wildcard

        if [ ! -e "${path}" ]; then
            Error  "ERROR: Not found \"${path}\""
        fi
    else
        local  rightOfWildcard="${path##*\*}"
        if [ ! -e "${leftOfWildcard}"*"${rightOfWildcard}" ]; then
            Error  "ERROR: Not found \"${path}\""
        fi
    fi
}

function  AssertNotExist() {
    local  path="$1"

    if [ -e "${path}" ]; then
        Error  "ERROR: Found \"${path}\""
    fi
}

# ExitIfMatched
#     Check exit code and return code in $( )
# Example:
#     local  out="$(x="$( command )" && echo "$x" || echo "(ERROR:$?)" )"
#     ExitIfMatched  "${out}"  '^\(ERROR:([0-9]*)\)$'
function  ExitIfMatched() {
    local  output="$1"
    local  regularExpression="$2"

    if [[ "${output}" =~ ${regularExpression} ]]; then
        local  exitCode="$( echo "${output}"  |  sed -E  's/'"${regularExpression}"'/\1/')"
        exit  "${exitCode}"
    fi
}

function  Error() {
    local  errorMessage="$1"
    local  exitCode="$2"
    if [ "${errorMessage}" == "" ]; then
        errorMessage="ERROR"
    fi
    if [ "${exitCode}" == "" ]; then  exitCode=2  ;fi

    echo  "${errorMessage}" >&2
    exit  "${exitCode}"
}

True=0
False=1
GitInitOption=$(gitInitOption)
Setting_Name=( )
Setting_LocalFullPath=( )
Setting_RepositoryURL=( )
Setting_BranchOrTag=( )
Setting_BaseRelativePath=( )
Setting_DeleteRelativePath=( )

Main "$@"
